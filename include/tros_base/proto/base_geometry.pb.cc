// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_geometry.proto

#include "base_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_base_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Oval;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sphere;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationFrame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Line;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PointCloud;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygen;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Cone;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Extrusion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Shape;
}  // namespace protobuf_base_5fgeometry_2eproto
namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_common_2eproto
namespace tros {
namespace tros_base {
namespace geometry {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class PointCloudDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointCloud>
      _instance;
} _PointCloud_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Line>
      _instance;
} _Line_default_instance_;
class PolygenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygen>
      _instance;
} _Polygen_default_instance_;
class OvalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Oval>
      _instance;
} _Oval_default_instance_;
class SphereDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sphere>
      _instance;
} _Sphere_default_instance_;
class ConeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cone>
      _instance;
  const ::tros::tros_base::geometry::Oval* oval_;
  const ::tros::tros_base::geometry::Polygen* polygen_;
} _Cone_default_instance_;
class ExtrusionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Extrusion>
      _instance;
  const ::tros::tros_base::geometry::Oval* oval_;
  const ::tros::tros_base::geometry::Polygen* polygen_;
} _Extrusion_default_instance_;
class TransformationFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationFrame>
      _instance;
} _TransformationFrame_default_instance_;
class ShapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Shape>
      _instance;
  const ::tros::tros_base::geometry::Point* point_;
  const ::tros::tros_base::geometry::PointCloud* point_cloud_;
  const ::tros::tros_base::geometry::Line* line_;
  const ::tros::tros_base::geometry::Polygen* polygen_;
  const ::tros::tros_base::geometry::Oval* oval_;
  const ::tros::tros_base::geometry::Sphere* sphere_;
  const ::tros::tros_base::geometry::Cone* cone_;
  const ::tros::tros_base::geometry::Extrusion* extrusion_;
} _Shape_default_instance_;
class SceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scene>
      _instance;
} _Scene_default_instance_;
}  // namespace geometry
}  // namespace tros_base
}  // namespace tros
namespace protobuf_base_5fgeometry_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Point_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsPointCloud() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_PointCloud_default_instance_;
    new (ptr) ::tros::tros_base::geometry::PointCloud();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::PointCloud::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PointCloud =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPointCloud}, {
      &protobuf_base_5fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Line_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Line();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Line::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Line =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLine}, {
      &protobuf_base_5fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsPolygen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Polygen_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Polygen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Polygen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Polygen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPolygen}, {
      &protobuf_base_5fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsOval() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Oval_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Oval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Oval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Oval =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOval}, {}};

static void InitDefaultsSphere() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Sphere_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Sphere();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Sphere::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sphere =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSphere}, {}};

static void InitDefaultsCone() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Cone_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Cone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Cone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Cone =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCone}, {
      &protobuf_base_5fgeometry_2eproto::scc_info_Oval.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Polygen.base,}};

static void InitDefaultsExtrusion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Extrusion_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Extrusion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Extrusion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Extrusion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsExtrusion}, {
      &protobuf_base_5fgeometry_2eproto::scc_info_Oval.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Polygen.base,}};

static void InitDefaultsTransformationFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_TransformationFrame_default_instance_;
    new (ptr) ::tros::tros_base::geometry::TransformationFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::TransformationFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationFrame}, {}};

static void InitDefaultsShape() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Shape_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Shape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Shape::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_Shape =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsShape}, {
      &protobuf_base_5fgeometry_2eproto::scc_info_Point.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_PointCloud.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Line.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Polygen.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Oval.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Sphere.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Cone.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Extrusion.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_TransformationFrame.base,}};

static void InitDefaultsScene() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::geometry::_Scene_default_instance_;
    new (ptr) ::tros::tros_base::geometry::Scene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::geometry::Scene::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Scene =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsScene}, {
      &protobuf_common_2eproto::scc_info_Header.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_Shape.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointCloud.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Line.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Polygen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Oval.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sphere.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cone.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Extrusion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationFrame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Shape.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scene.base);
}

::google::protobuf::Metadata file_level_metadata[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Point, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Point, width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::PointCloud, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Line, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Line, width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Polygen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Polygen, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Oval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Oval, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Oval, b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Sphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Sphere, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Sphere, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Sphere, c_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Cone, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Cone, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tros::tros_base::geometry::ConeDefaultTypeInternal, oval_),
  offsetof(::tros::tros_base::geometry::ConeDefaultTypeInternal, polygen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Cone, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Cone, surface_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Extrusion, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Extrusion, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tros::tros_base::geometry::ExtrusionDefaultTypeInternal, oval_),
  offsetof(::tros::tros_base::geometry::ExtrusionDefaultTypeInternal, polygen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Extrusion, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Extrusion, surface_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::TransformationFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::TransformationFrame, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::TransformationFrame, parent_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::TransformationFrame, now_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::TransformationFrame, tf_to_parent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Shape, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tros::tros_base::geometry::ShapeDefaultTypeInternal, point_),
  offsetof(::tros::tros_base::geometry::ShapeDefaultTypeInternal, point_cloud_),
  offsetof(::tros::tros_base::geometry::ShapeDefaultTypeInternal, line_),
  offsetof(::tros::tros_base::geometry::ShapeDefaultTypeInternal, polygen_),
  offsetof(::tros::tros_base::geometry::ShapeDefaultTypeInternal, oval_),
  offsetof(::tros::tros_base::geometry::ShapeDefaultTypeInternal, sphere_),
  offsetof(::tros::tros_base::geometry::ShapeDefaultTypeInternal, cone_),
  offsetof(::tros::tros_base::geometry::ShapeDefaultTypeInternal, extrusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Shape, apparent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Shape, color_rgb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Shape, transformation_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Shape, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Shape, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Scene, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::geometry::Scene, shapes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tros::tros_base::geometry::Point)},
  { 7, -1, sizeof(::tros::tros_base::geometry::PointCloud)},
  { 13, -1, sizeof(::tros::tros_base::geometry::Line)},
  { 20, -1, sizeof(::tros::tros_base::geometry::Polygen)},
  { 26, -1, sizeof(::tros::tros_base::geometry::Oval)},
  { 33, -1, sizeof(::tros::tros_base::geometry::Sphere)},
  { 41, -1, sizeof(::tros::tros_base::geometry::Cone)},
  { 50, -1, sizeof(::tros::tros_base::geometry::Extrusion)},
  { 59, -1, sizeof(::tros::tros_base::geometry::TransformationFrame)},
  { 68, -1, sizeof(::tros::tros_base::geometry::Shape)},
  { 86, -1, sizeof(::tros::tros_base::geometry::Scene)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_PointCloud_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Polygen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Oval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Sphere_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Cone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Extrusion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_TransformationFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Shape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::geometry::_Scene_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "base_geometry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023base_geometry.proto\022\027tros.tros_base.ge"
      "ometry\032\014common.proto\"$\n\005Point\022\014\n\004data\030\001 "
      "\003(\002\022\r\n\005width\030\002 \001(\002\"<\n\nPointCloud\022.\n\006poin"
      "ts\030\001 \003(\0132\036.tros.tros_base.geometry.Point"
      "\"E\n\004Line\022.\n\006points\030\001 \003(\0132\036.tros.tros_bas"
      "e.geometry.Point\022\r\n\005width\030\002 \001(\002\"9\n\007Polyg"
      "en\022.\n\006points\030\001 \003(\0132\036.tros.tros_base.geom"
      "etry.Point\"\034\n\004Oval\022\t\n\001a\030\001 \001(\002\022\t\n\001b\030\002 \001(\002"
      "\")\n\006Sphere\022\t\n\001a\030\001 \001(\002\022\t\n\001b\030\002 \001(\002\022\t\n\001c\030\003 "
      "\001(\002\"\212\001\n\004Cone\022-\n\004oval\030\001 \001(\0132\035.tros.tros_b"
      "ase.geometry.OvalH\000\0223\n\007polygen\030\002 \001(\0132 .t"
      "ros.tros_base.geometry.PolygenH\000\022\016\n\006heig"
      "ht\030\003 \001(\004B\016\n\014surface_type\"\217\001\n\tExtrusion\022-"
      "\n\004oval\030\001 \001(\0132\035.tros.tros_base.geometry.O"
      "valH\000\0223\n\007polygen\030\002 \001(\0132 .tros.tros_base."
      "geometry.PolygenH\000\022\016\n\006height\030\003 \001(\004B\016\n\014su"
      "rface_type\"h\n\023TransformationFrame\022\022\n\ntim"
      "e_stamp\030\001 \001(\004\022\024\n\014parent_frame\030\002 \001(\t\022\021\n\tn"
      "ow_frame\030\003 \001(\t\022\024\n\014tf_to_parent\030\004 \003(\002\"\251\004\n"
      "\005Shape\022/\n\005point\030\001 \001(\0132\036.tros.tros_base.g"
      "eometry.PointH\000\022:\n\013point_cloud\030\002 \001(\0132#.t"
      "ros.tros_base.geometry.PointCloudH\000\022-\n\004l"
      "ine\030\003 \001(\0132\035.tros.tros_base.geometry.Line"
      "H\000\0223\n\007polygen\030\004 \001(\0132 .tros.tros_base.geo"
      "metry.PolygenH\000\022-\n\004oval\030\005 \001(\0132\035.tros.tro"
      "s_base.geometry.OvalH\000\0221\n\006sphere\030\006 \001(\0132\037"
      ".tros.tros_base.geometry.SphereH\000\022-\n\004con"
      "e\030\007 \001(\0132\035.tros.tros_base.geometry.ConeH\000"
      "\0227\n\textrusion\030\010 \001(\0132\".tros.tros_base.geo"
      "metry.ExtrusionH\000\022\020\n\010apparent\030\t \001(\002\022\021\n\tc"
      "olor_rgb\030\n \003(\002\022J\n\024transformation_frame\030\013"
      " \001(\0132,.tros.tros_base.geometry.Transform"
      "ationFrame\022\014\n\004name\030\014 \001(\tB\006\n\004type\"f\n\005Scen"
      "e\022-\n\006header\030\001 \001(\0132\035.tros.tros_base.commo"
      "n.Header\022.\n\006shapes\030\002 \003(\0132\036.tros.tros_bas"
      "e.geometry.Shapeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1424);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base_geometry.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_base_5fgeometry_2eproto
namespace tros {
namespace tros_base {
namespace geometry {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kDataFieldNumber;
const int Point::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  width_ = from.width_;
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Point)
}

void Point::SharedCtor() {
  width_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  width_ = 0;
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  // float width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->width(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  // float width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->width(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float width = 2;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.width() != 0) {
    set_width(from.width());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(width_, other->width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointCloud::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloud::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloud::PointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_PointCloud.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.PointCloud)
}

void PointCloud::SharedCtor() {
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
}

void PointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointCloud& PointCloud::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_PointCloud.base);
  return *internal_default_instance();
}


void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.PointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.PointCloud)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tros.tros_base.geometry.Point points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.PointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.PointCloud)
  return false;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.PointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tros.tros_base.geometry.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.PointCloud)
}

::google::protobuf::uint8* PointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.PointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tros.tros_base.geometry.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.PointCloud)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tros.tros_base.geometry.Point points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.PointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Line::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kPointsFieldNumber;
const int Line::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Line.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  width_ = from.width_;
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Line)
}

void Line::SharedCtor() {
  width_ = 0;
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Line)
  SharedDtor();
}

void Line::SharedDtor() {
}

void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Line& Line::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Line.base);
  return *internal_default_instance();
}


void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  width_ = 0;
  _internal_metadata_.Clear();
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Line)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tros.tros_base.geometry.Point points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tros.tros_base.geometry.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  // float width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->width(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tros.tros_base.geometry.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  // float width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->width(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Line)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tros.tros_base.geometry.Point points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // float width = 2;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.width() != 0) {
    set_width(from.width());
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(width_, other->width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Polygen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygen::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygen::Polygen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Polygen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Polygen)
}
Polygen::Polygen(const Polygen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Polygen)
}

void Polygen::SharedCtor() {
}

Polygen::~Polygen() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Polygen)
  SharedDtor();
}

void Polygen::SharedDtor() {
}

void Polygen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Polygen::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygen& Polygen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Polygen.base);
  return *internal_default_instance();
}


void Polygen::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Polygen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

bool Polygen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Polygen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tros.tros_base.geometry.Point points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Polygen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Polygen)
  return false;
#undef DO_
}

void Polygen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Polygen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tros.tros_base.geometry.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Polygen)
}

::google::protobuf::uint8* Polygen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Polygen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tros.tros_base.geometry.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Polygen)
  return target;
}

size_t Polygen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Polygen)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tros.tros_base.geometry.Point points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Polygen)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Polygen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Polygen)
    MergeFrom(*source);
  }
}

void Polygen::MergeFrom(const Polygen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Polygen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polygen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Polygen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygen::CopyFrom(const Polygen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Polygen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygen::IsInitialized() const {
  return true;
}

void Polygen::Swap(Polygen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygen::InternalSwap(Polygen* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Polygen::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Oval::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Oval::kAFieldNumber;
const int Oval::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Oval::Oval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Oval.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Oval)
}
Oval::Oval(const Oval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Oval)
}

void Oval::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&a_)) + sizeof(b_));
}

Oval::~Oval() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Oval)
  SharedDtor();
}

void Oval::SharedDtor() {
}

void Oval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Oval::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Oval& Oval::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Oval.base);
  return *internal_default_instance();
}


void Oval::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Oval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&a_)) + sizeof(b_));
  _internal_metadata_.Clear();
}

bool Oval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Oval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Oval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Oval)
  return false;
#undef DO_
}

void Oval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Oval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->a(), output);
  }

  // float b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->b(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Oval)
}

::google::protobuf::uint8* Oval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Oval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float a = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->a(), target);
  }

  // float b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->b(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Oval)
  return target;
}

size_t Oval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Oval)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float a = 1;
  if (this->a() != 0) {
    total_size += 1 + 4;
  }

  // float b = 2;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Oval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Oval)
  GOOGLE_DCHECK_NE(&from, this);
  const Oval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Oval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Oval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Oval)
    MergeFrom(*source);
  }
}

void Oval::MergeFrom(const Oval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Oval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void Oval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Oval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Oval::CopyFrom(const Oval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Oval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Oval::IsInitialized() const {
  return true;
}

void Oval::Swap(Oval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Oval::InternalSwap(Oval* other) {
  using std::swap;
  swap(a_, other->a_);
  swap(b_, other->b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Oval::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sphere::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sphere::kAFieldNumber;
const int Sphere::kBFieldNumber;
const int Sphere::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sphere::Sphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Sphere.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Sphere)
}
Sphere::Sphere(const Sphere& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Sphere)
}

void Sphere::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
}

Sphere::~Sphere() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Sphere)
  SharedDtor();
}

void Sphere::SharedDtor() {
}

void Sphere::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sphere::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sphere& Sphere::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Sphere.base);
  return *internal_default_instance();
}


void Sphere::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Sphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
  _internal_metadata_.Clear();
}

bool Sphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Sphere)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Sphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Sphere)
  return false;
#undef DO_
}

void Sphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Sphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->a(), output);
  }

  // float b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->b(), output);
  }

  // float c = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->c(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Sphere)
}

::google::protobuf::uint8* Sphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Sphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float a = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->a(), target);
  }

  // float b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->b(), target);
  }

  // float c = 3;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->c(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Sphere)
  return target;
}

size_t Sphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Sphere)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float a = 1;
  if (this->a() != 0) {
    total_size += 1 + 4;
  }

  // float b = 2;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // float c = 3;
  if (this->c() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  const Sphere* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Sphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Sphere)
    MergeFrom(*source);
  }
}

void Sphere::MergeFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
}

void Sphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sphere::CopyFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sphere::IsInitialized() const {
  return true;
}

void Sphere::Swap(Sphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sphere::InternalSwap(Sphere* other) {
  using std::swap;
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sphere::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Cone::InitAsDefaultInstance() {
  ::tros::tros_base::geometry::_Cone_default_instance_.oval_ = const_cast< ::tros::tros_base::geometry::Oval*>(
      ::tros::tros_base::geometry::Oval::internal_default_instance());
  ::tros::tros_base::geometry::_Cone_default_instance_.polygen_ = const_cast< ::tros::tros_base::geometry::Polygen*>(
      ::tros::tros_base::geometry::Polygen::internal_default_instance());
}
void Cone::set_allocated_oval(::tros::tros_base::geometry::Oval* oval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_surface_type();
  if (oval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oval, submessage_arena);
    }
    set_has_oval();
    surface_type_.oval_ = oval;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Cone.oval)
}
void Cone::set_allocated_polygen(::tros::tros_base::geometry::Polygen* polygen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_surface_type();
  if (polygen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygen, submessage_arena);
    }
    set_has_polygen();
    surface_type_.polygen_ = polygen;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Cone.polygen)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cone::kOvalFieldNumber;
const int Cone::kPolygenFieldNumber;
const int Cone::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cone::Cone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Cone.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Cone)
}
Cone::Cone(const Cone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  height_ = from.height_;
  clear_has_surface_type();
  switch (from.surface_type_case()) {
    case kOval: {
      mutable_oval()->::tros::tros_base::geometry::Oval::MergeFrom(from.oval());
      break;
    }
    case kPolygen: {
      mutable_polygen()->::tros::tros_base::geometry::Polygen::MergeFrom(from.polygen());
      break;
    }
    case SURFACE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Cone)
}

void Cone::SharedCtor() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_surface_type();
}

Cone::~Cone() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Cone)
  SharedDtor();
}

void Cone::SharedDtor() {
  if (has_surface_type()) {
    clear_surface_type();
  }
}

void Cone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Cone::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cone& Cone::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Cone.base);
  return *internal_default_instance();
}


void Cone::clear_surface_type() {
// @@protoc_insertion_point(one_of_clear_start:tros.tros_base.geometry.Cone)
  switch (surface_type_case()) {
    case kOval: {
      delete surface_type_.oval_;
      break;
    }
    case kPolygen: {
      delete surface_type_.polygen_;
      break;
    }
    case SURFACE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SURFACE_TYPE_NOT_SET;
}


void Cone::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Cone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = GOOGLE_ULONGLONG(0);
  clear_surface_type();
  _internal_metadata_.Clear();
}

bool Cone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Cone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tros.tros_base.geometry.Oval oval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.Polygen polygen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Cone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Cone)
  return false;
#undef DO_
}

void Cone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Cone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.geometry.Oval oval = 1;
  if (has_oval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_oval(), output);
  }

  // .tros.tros_base.geometry.Polygen polygen = 2;
  if (has_polygen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_polygen(), output);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Cone)
}

::google::protobuf::uint8* Cone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Cone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.geometry.Oval oval = 1;
  if (has_oval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_oval(), deterministic, target);
  }

  // .tros.tros_base.geometry.Polygen polygen = 2;
  if (has_polygen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_polygen(), deterministic, target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Cone)
  return target;
}

size_t Cone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Cone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->height());
  }

  switch (surface_type_case()) {
    // .tros.tros_base.geometry.Oval oval = 1;
    case kOval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *surface_type_.oval_);
      break;
    }
    // .tros.tros_base.geometry.Polygen polygen = 2;
    case kPolygen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *surface_type_.polygen_);
      break;
    }
    case SURFACE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Cone)
  GOOGLE_DCHECK_NE(&from, this);
  const Cone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Cone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Cone)
    MergeFrom(*source);
  }
}

void Cone::MergeFrom(const Cone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Cone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
  switch (from.surface_type_case()) {
    case kOval: {
      mutable_oval()->::tros::tros_base::geometry::Oval::MergeFrom(from.oval());
      break;
    }
    case kPolygen: {
      mutable_polygen()->::tros::tros_base::geometry::Polygen::MergeFrom(from.polygen());
      break;
    }
    case SURFACE_TYPE_NOT_SET: {
      break;
    }
  }
}

void Cone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Cone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cone::CopyFrom(const Cone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Cone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cone::IsInitialized() const {
  return true;
}

void Cone::Swap(Cone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cone::InternalSwap(Cone* other) {
  using std::swap;
  swap(height_, other->height_);
  swap(surface_type_, other->surface_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Cone::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Extrusion::InitAsDefaultInstance() {
  ::tros::tros_base::geometry::_Extrusion_default_instance_.oval_ = const_cast< ::tros::tros_base::geometry::Oval*>(
      ::tros::tros_base::geometry::Oval::internal_default_instance());
  ::tros::tros_base::geometry::_Extrusion_default_instance_.polygen_ = const_cast< ::tros::tros_base::geometry::Polygen*>(
      ::tros::tros_base::geometry::Polygen::internal_default_instance());
}
void Extrusion::set_allocated_oval(::tros::tros_base::geometry::Oval* oval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_surface_type();
  if (oval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oval, submessage_arena);
    }
    set_has_oval();
    surface_type_.oval_ = oval;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Extrusion.oval)
}
void Extrusion::set_allocated_polygen(::tros::tros_base::geometry::Polygen* polygen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_surface_type();
  if (polygen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygen, submessage_arena);
    }
    set_has_polygen();
    surface_type_.polygen_ = polygen;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Extrusion.polygen)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extrusion::kOvalFieldNumber;
const int Extrusion::kPolygenFieldNumber;
const int Extrusion::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extrusion::Extrusion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Extrusion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Extrusion)
}
Extrusion::Extrusion(const Extrusion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  height_ = from.height_;
  clear_has_surface_type();
  switch (from.surface_type_case()) {
    case kOval: {
      mutable_oval()->::tros::tros_base::geometry::Oval::MergeFrom(from.oval());
      break;
    }
    case kPolygen: {
      mutable_polygen()->::tros::tros_base::geometry::Polygen::MergeFrom(from.polygen());
      break;
    }
    case SURFACE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Extrusion)
}

void Extrusion::SharedCtor() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_surface_type();
}

Extrusion::~Extrusion() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Extrusion)
  SharedDtor();
}

void Extrusion::SharedDtor() {
  if (has_surface_type()) {
    clear_surface_type();
  }
}

void Extrusion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Extrusion::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Extrusion& Extrusion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Extrusion.base);
  return *internal_default_instance();
}


void Extrusion::clear_surface_type() {
// @@protoc_insertion_point(one_of_clear_start:tros.tros_base.geometry.Extrusion)
  switch (surface_type_case()) {
    case kOval: {
      delete surface_type_.oval_;
      break;
    }
    case kPolygen: {
      delete surface_type_.polygen_;
      break;
    }
    case SURFACE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SURFACE_TYPE_NOT_SET;
}


void Extrusion::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Extrusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = GOOGLE_ULONGLONG(0);
  clear_surface_type();
  _internal_metadata_.Clear();
}

bool Extrusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Extrusion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tros.tros_base.geometry.Oval oval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.Polygen polygen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Extrusion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Extrusion)
  return false;
#undef DO_
}

void Extrusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Extrusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.geometry.Oval oval = 1;
  if (has_oval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_oval(), output);
  }

  // .tros.tros_base.geometry.Polygen polygen = 2;
  if (has_polygen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_polygen(), output);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Extrusion)
}

::google::protobuf::uint8* Extrusion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Extrusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.geometry.Oval oval = 1;
  if (has_oval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_oval(), deterministic, target);
  }

  // .tros.tros_base.geometry.Polygen polygen = 2;
  if (has_polygen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_polygen(), deterministic, target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Extrusion)
  return target;
}

size_t Extrusion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Extrusion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->height());
  }

  switch (surface_type_case()) {
    // .tros.tros_base.geometry.Oval oval = 1;
    case kOval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *surface_type_.oval_);
      break;
    }
    // .tros.tros_base.geometry.Polygen polygen = 2;
    case kPolygen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *surface_type_.polygen_);
      break;
    }
    case SURFACE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extrusion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Extrusion)
  GOOGLE_DCHECK_NE(&from, this);
  const Extrusion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Extrusion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Extrusion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Extrusion)
    MergeFrom(*source);
  }
}

void Extrusion::MergeFrom(const Extrusion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Extrusion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
  switch (from.surface_type_case()) {
    case kOval: {
      mutable_oval()->::tros::tros_base::geometry::Oval::MergeFrom(from.oval());
      break;
    }
    case kPolygen: {
      mutable_polygen()->::tros::tros_base::geometry::Polygen::MergeFrom(from.polygen());
      break;
    }
    case SURFACE_TYPE_NOT_SET: {
      break;
    }
  }
}

void Extrusion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Extrusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extrusion::CopyFrom(const Extrusion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Extrusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrusion::IsInitialized() const {
  return true;
}

void Extrusion::Swap(Extrusion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extrusion::InternalSwap(Extrusion* other) {
  using std::swap;
  swap(height_, other->height_);
  swap(surface_type_, other->surface_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Extrusion::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransformationFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationFrame::kTimeStampFieldNumber;
const int TransformationFrame::kParentFrameFieldNumber;
const int TransformationFrame::kNowFrameFieldNumber;
const int TransformationFrame::kTfToParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationFrame::TransformationFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_TransformationFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.TransformationFrame)
}
TransformationFrame::TransformationFrame(const TransformationFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tf_to_parent_(from.tf_to_parent_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent_frame().size() > 0) {
    parent_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_frame_);
  }
  now_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.now_frame().size() > 0) {
    now_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.now_frame_);
  }
  time_stamp_ = from.time_stamp_;
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.TransformationFrame)
}

void TransformationFrame::SharedCtor() {
  parent_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  now_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = GOOGLE_ULONGLONG(0);
}

TransformationFrame::~TransformationFrame() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.TransformationFrame)
  SharedDtor();
}

void TransformationFrame::SharedDtor() {
  parent_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  now_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransformationFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransformationFrame::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransformationFrame& TransformationFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_TransformationFrame.base);
  return *internal_default_instance();
}


void TransformationFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.TransformationFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tf_to_parent_.Clear();
  parent_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  now_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TransformationFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.TransformationFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parent_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_frame()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent_frame().data(), static_cast<int>(this->parent_frame().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tros.tros_base.geometry.TransformationFrame.parent_frame"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string now_frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_now_frame()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->now_frame().data(), static_cast<int>(this->now_frame().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tros.tros_base.geometry.TransformationFrame.now_frame"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tf_to_parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tf_to_parent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_tf_to_parent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.TransformationFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.TransformationFrame)
  return false;
#undef DO_
}

void TransformationFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.TransformationFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_stamp(), output);
  }

  // string parent_frame = 2;
  if (this->parent_frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_frame().data(), static_cast<int>(this->parent_frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tros.tros_base.geometry.TransformationFrame.parent_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parent_frame(), output);
  }

  // string now_frame = 3;
  if (this->now_frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->now_frame().data(), static_cast<int>(this->now_frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tros.tros_base.geometry.TransformationFrame.now_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->now_frame(), output);
  }

  // repeated float tf_to_parent = 4;
  if (this->tf_to_parent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tf_to_parent_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->tf_to_parent().data(), this->tf_to_parent_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.TransformationFrame)
}

::google::protobuf::uint8* TransformationFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.TransformationFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_stamp(), target);
  }

  // string parent_frame = 2;
  if (this->parent_frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_frame().data(), static_cast<int>(this->parent_frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tros.tros_base.geometry.TransformationFrame.parent_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parent_frame(), target);
  }

  // string now_frame = 3;
  if (this->now_frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->now_frame().data(), static_cast<int>(this->now_frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tros.tros_base.geometry.TransformationFrame.now_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->now_frame(), target);
  }

  // repeated float tf_to_parent = 4;
  if (this->tf_to_parent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tf_to_parent_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tf_to_parent_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.TransformationFrame)
  return target;
}

size_t TransformationFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.TransformationFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float tf_to_parent = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tf_to_parent_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tf_to_parent_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string parent_frame = 2;
  if (this->parent_frame().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_frame());
  }

  // string now_frame = 3;
  if (this->now_frame().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->now_frame());
  }

  // uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_stamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.TransformationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.TransformationFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.TransformationFrame)
    MergeFrom(*source);
  }
}

void TransformationFrame::MergeFrom(const TransformationFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.TransformationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tf_to_parent_.MergeFrom(from.tf_to_parent_);
  if (from.parent_frame().size() > 0) {

    parent_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_frame_);
  }
  if (from.now_frame().size() > 0) {

    now_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.now_frame_);
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
}

void TransformationFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.TransformationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationFrame::CopyFrom(const TransformationFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.TransformationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationFrame::IsInitialized() const {
  return true;
}

void TransformationFrame::Swap(TransformationFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationFrame::InternalSwap(TransformationFrame* other) {
  using std::swap;
  tf_to_parent_.InternalSwap(&other->tf_to_parent_);
  parent_frame_.Swap(&other->parent_frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  now_frame_.Swap(&other->now_frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_stamp_, other->time_stamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransformationFrame::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Shape::InitAsDefaultInstance() {
  ::tros::tros_base::geometry::_Shape_default_instance_.point_ = const_cast< ::tros::tros_base::geometry::Point*>(
      ::tros::tros_base::geometry::Point::internal_default_instance());
  ::tros::tros_base::geometry::_Shape_default_instance_.point_cloud_ = const_cast< ::tros::tros_base::geometry::PointCloud*>(
      ::tros::tros_base::geometry::PointCloud::internal_default_instance());
  ::tros::tros_base::geometry::_Shape_default_instance_.line_ = const_cast< ::tros::tros_base::geometry::Line*>(
      ::tros::tros_base::geometry::Line::internal_default_instance());
  ::tros::tros_base::geometry::_Shape_default_instance_.polygen_ = const_cast< ::tros::tros_base::geometry::Polygen*>(
      ::tros::tros_base::geometry::Polygen::internal_default_instance());
  ::tros::tros_base::geometry::_Shape_default_instance_.oval_ = const_cast< ::tros::tros_base::geometry::Oval*>(
      ::tros::tros_base::geometry::Oval::internal_default_instance());
  ::tros::tros_base::geometry::_Shape_default_instance_.sphere_ = const_cast< ::tros::tros_base::geometry::Sphere*>(
      ::tros::tros_base::geometry::Sphere::internal_default_instance());
  ::tros::tros_base::geometry::_Shape_default_instance_.cone_ = const_cast< ::tros::tros_base::geometry::Cone*>(
      ::tros::tros_base::geometry::Cone::internal_default_instance());
  ::tros::tros_base::geometry::_Shape_default_instance_.extrusion_ = const_cast< ::tros::tros_base::geometry::Extrusion*>(
      ::tros::tros_base::geometry::Extrusion::internal_default_instance());
  ::tros::tros_base::geometry::_Shape_default_instance_._instance.get_mutable()->transformation_frame_ = const_cast< ::tros::tros_base::geometry::TransformationFrame*>(
      ::tros::tros_base::geometry::TransformationFrame::internal_default_instance());
}
void Shape::set_allocated_point(::tros::tros_base::geometry::Point* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    set_has_point();
    type_.point_ = point;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Shape.point)
}
void Shape::set_allocated_point_cloud(::tros::tros_base::geometry::PointCloud* point_cloud) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (point_cloud) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point_cloud = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point_cloud, submessage_arena);
    }
    set_has_point_cloud();
    type_.point_cloud_ = point_cloud;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Shape.point_cloud)
}
void Shape::set_allocated_line(::tros::tros_base::geometry::Line* line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line, submessage_arena);
    }
    set_has_line();
    type_.line_ = line;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Shape.line)
}
void Shape::set_allocated_polygen(::tros::tros_base::geometry::Polygen* polygen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (polygen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygen, submessage_arena);
    }
    set_has_polygen();
    type_.polygen_ = polygen;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Shape.polygen)
}
void Shape::set_allocated_oval(::tros::tros_base::geometry::Oval* oval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (oval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oval, submessage_arena);
    }
    set_has_oval();
    type_.oval_ = oval;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Shape.oval)
}
void Shape::set_allocated_sphere(::tros::tros_base::geometry::Sphere* sphere) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (sphere) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sphere = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sphere, submessage_arena);
    }
    set_has_sphere();
    type_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Shape.sphere)
}
void Shape::set_allocated_cone(::tros::tros_base::geometry::Cone* cone) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (cone) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cone = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cone, submessage_arena);
    }
    set_has_cone();
    type_.cone_ = cone;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Shape.cone)
}
void Shape::set_allocated_extrusion(::tros::tros_base::geometry::Extrusion* extrusion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (extrusion) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extrusion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extrusion, submessage_arena);
    }
    set_has_extrusion();
    type_.extrusion_ = extrusion;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.geometry.Shape.extrusion)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shape::kPointFieldNumber;
const int Shape::kPointCloudFieldNumber;
const int Shape::kLineFieldNumber;
const int Shape::kPolygenFieldNumber;
const int Shape::kOvalFieldNumber;
const int Shape::kSphereFieldNumber;
const int Shape::kConeFieldNumber;
const int Shape::kExtrusionFieldNumber;
const int Shape::kApparentFieldNumber;
const int Shape::kColorRgbFieldNumber;
const int Shape::kTransformationFrameFieldNumber;
const int Shape::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shape::Shape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Shape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Shape)
}
Shape::Shape(const Shape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      color_rgb_(from.color_rgb_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_transformation_frame()) {
    transformation_frame_ = new ::tros::tros_base::geometry::TransformationFrame(*from.transformation_frame_);
  } else {
    transformation_frame_ = NULL;
  }
  apparent_ = from.apparent_;
  clear_has_type();
  switch (from.type_case()) {
    case kPoint: {
      mutable_point()->::tros::tros_base::geometry::Point::MergeFrom(from.point());
      break;
    }
    case kPointCloud: {
      mutable_point_cloud()->::tros::tros_base::geometry::PointCloud::MergeFrom(from.point_cloud());
      break;
    }
    case kLine: {
      mutable_line()->::tros::tros_base::geometry::Line::MergeFrom(from.line());
      break;
    }
    case kPolygen: {
      mutable_polygen()->::tros::tros_base::geometry::Polygen::MergeFrom(from.polygen());
      break;
    }
    case kOval: {
      mutable_oval()->::tros::tros_base::geometry::Oval::MergeFrom(from.oval());
      break;
    }
    case kSphere: {
      mutable_sphere()->::tros::tros_base::geometry::Sphere::MergeFrom(from.sphere());
      break;
    }
    case kCone: {
      mutable_cone()->::tros::tros_base::geometry::Cone::MergeFrom(from.cone());
      break;
    }
    case kExtrusion: {
      mutable_extrusion()->::tros::tros_base::geometry::Extrusion::MergeFrom(from.extrusion());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Shape)
}

void Shape::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transformation_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&apparent_) -
      reinterpret_cast<char*>(&transformation_frame_)) + sizeof(apparent_));
  clear_has_type();
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Shape)
  SharedDtor();
}

void Shape::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transformation_frame_;
  if (has_type()) {
    clear_type();
  }
}

void Shape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Shape::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shape& Shape::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Shape.base);
  return *internal_default_instance();
}


void Shape::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:tros.tros_base.geometry.Shape)
  switch (type_case()) {
    case kPoint: {
      delete type_.point_;
      break;
    }
    case kPointCloud: {
      delete type_.point_cloud_;
      break;
    }
    case kLine: {
      delete type_.line_;
      break;
    }
    case kPolygen: {
      delete type_.polygen_;
      break;
    }
    case kOval: {
      delete type_.oval_;
      break;
    }
    case kSphere: {
      delete type_.sphere_;
      break;
    }
    case kCone: {
      delete type_.cone_;
      break;
    }
    case kExtrusion: {
      delete type_.extrusion_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_rgb_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transformation_frame_ != NULL) {
    delete transformation_frame_;
  }
  transformation_frame_ = NULL;
  apparent_ = 0;
  clear_type();
  _internal_metadata_.Clear();
}

bool Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Shape)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tros.tros_base.geometry.Point point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.PointCloud point_cloud = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.Line line = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.Polygen polygen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.Oval oval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.Sphere sphere = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sphere()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.Cone cone = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.Extrusion extrusion = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_extrusion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float apparent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &apparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float color_rgb = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color_rgb())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_color_rgb())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.TransformationFrame transformation_frame = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transformation_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tros.tros_base.geometry.Shape.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Shape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Shape)
  return false;
#undef DO_
}

void Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.geometry.Point point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_point(), output);
  }

  // .tros.tros_base.geometry.PointCloud point_cloud = 2;
  if (has_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_point_cloud(), output);
  }

  // .tros.tros_base.geometry.Line line = 3;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_line(), output);
  }

  // .tros.tros_base.geometry.Polygen polygen = 4;
  if (has_polygen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_polygen(), output);
  }

  // .tros.tros_base.geometry.Oval oval = 5;
  if (has_oval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_oval(), output);
  }

  // .tros.tros_base.geometry.Sphere sphere = 6;
  if (has_sphere()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_sphere(), output);
  }

  // .tros.tros_base.geometry.Cone cone = 7;
  if (has_cone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_cone(), output);
  }

  // .tros.tros_base.geometry.Extrusion extrusion = 8;
  if (has_extrusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_extrusion(), output);
  }

  // float apparent = 9;
  if (this->apparent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->apparent(), output);
  }

  // repeated float color_rgb = 10;
  if (this->color_rgb_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _color_rgb_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->color_rgb().data(), this->color_rgb_size(), output);
  }

  // .tros.tros_base.geometry.TransformationFrame transformation_frame = 11;
  if (this->has_transformation_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_transformation_frame(), output);
  }

  // string name = 12;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tros.tros_base.geometry.Shape.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Shape)
}

::google::protobuf::uint8* Shape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.geometry.Point point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_point(), deterministic, target);
  }

  // .tros.tros_base.geometry.PointCloud point_cloud = 2;
  if (has_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_point_cloud(), deterministic, target);
  }

  // .tros.tros_base.geometry.Line line = 3;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_line(), deterministic, target);
  }

  // .tros.tros_base.geometry.Polygen polygen = 4;
  if (has_polygen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_polygen(), deterministic, target);
  }

  // .tros.tros_base.geometry.Oval oval = 5;
  if (has_oval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_oval(), deterministic, target);
  }

  // .tros.tros_base.geometry.Sphere sphere = 6;
  if (has_sphere()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_sphere(), deterministic, target);
  }

  // .tros.tros_base.geometry.Cone cone = 7;
  if (has_cone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_cone(), deterministic, target);
  }

  // .tros.tros_base.geometry.Extrusion extrusion = 8;
  if (has_extrusion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_extrusion(), deterministic, target);
  }

  // float apparent = 9;
  if (this->apparent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->apparent(), target);
  }

  // repeated float color_rgb = 10;
  if (this->color_rgb_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _color_rgb_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->color_rgb_, target);
  }

  // .tros.tros_base.geometry.TransformationFrame transformation_frame = 11;
  if (this->has_transformation_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_transformation_frame(), deterministic, target);
  }

  // string name = 12;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tros.tros_base.geometry.Shape.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Shape)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float color_rgb = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->color_rgb_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _color_rgb_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 12;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tros.tros_base.geometry.TransformationFrame transformation_frame = 11;
  if (this->has_transformation_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transformation_frame_);
  }

  // float apparent = 9;
  if (this->apparent() != 0) {
    total_size += 1 + 4;
  }

  switch (type_case()) {
    // .tros.tros_base.geometry.Point point = 1;
    case kPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.point_);
      break;
    }
    // .tros.tros_base.geometry.PointCloud point_cloud = 2;
    case kPointCloud: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.point_cloud_);
      break;
    }
    // .tros.tros_base.geometry.Line line = 3;
    case kLine: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.line_);
      break;
    }
    // .tros.tros_base.geometry.Polygen polygen = 4;
    case kPolygen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.polygen_);
      break;
    }
    // .tros.tros_base.geometry.Oval oval = 5;
    case kOval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.oval_);
      break;
    }
    // .tros.tros_base.geometry.Sphere sphere = 6;
    case kSphere: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.sphere_);
      break;
    }
    // .tros.tros_base.geometry.Cone cone = 7;
    case kCone: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.cone_);
      break;
    }
    // .tros.tros_base.geometry.Extrusion extrusion = 8;
    case kExtrusion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.extrusion_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const Shape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Shape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Shape)
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  color_rgb_.MergeFrom(from.color_rgb_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_transformation_frame()) {
    mutable_transformation_frame()->::tros::tros_base::geometry::TransformationFrame::MergeFrom(from.transformation_frame());
  }
  if (from.apparent() != 0) {
    set_apparent(from.apparent());
  }
  switch (from.type_case()) {
    case kPoint: {
      mutable_point()->::tros::tros_base::geometry::Point::MergeFrom(from.point());
      break;
    }
    case kPointCloud: {
      mutable_point_cloud()->::tros::tros_base::geometry::PointCloud::MergeFrom(from.point_cloud());
      break;
    }
    case kLine: {
      mutable_line()->::tros::tros_base::geometry::Line::MergeFrom(from.line());
      break;
    }
    case kPolygen: {
      mutable_polygen()->::tros::tros_base::geometry::Polygen::MergeFrom(from.polygen());
      break;
    }
    case kOval: {
      mutable_oval()->::tros::tros_base::geometry::Oval::MergeFrom(from.oval());
      break;
    }
    case kSphere: {
      mutable_sphere()->::tros::tros_base::geometry::Sphere::MergeFrom(from.sphere());
      break;
    }
    case kCone: {
      mutable_cone()->::tros::tros_base::geometry::Cone::MergeFrom(from.cone());
      break;
    }
    case kExtrusion: {
      mutable_extrusion()->::tros::tros_base::geometry::Extrusion::MergeFrom(from.extrusion());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Shape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  return true;
}

void Shape::Swap(Shape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shape::InternalSwap(Shape* other) {
  using std::swap;
  color_rgb_.InternalSwap(&other->color_rgb_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transformation_frame_, other->transformation_frame_);
  swap(apparent_, other->apparent_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Shape::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scene::InitAsDefaultInstance() {
  ::tros::tros_base::geometry::_Scene_default_instance_._instance.get_mutable()->header_ = const_cast< ::tros::tros_base::common::Header*>(
      ::tros::tros_base::common::Header::internal_default_instance());
}
void Scene::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scene::kHeaderFieldNumber;
const int Scene::kShapesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scene::Scene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_base_5fgeometry_2eproto::scc_info_Scene.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.geometry.Scene)
}
Scene::Scene(const Scene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::tros::tros_base::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.geometry.Scene)
}

void Scene::SharedCtor() {
  header_ = NULL;
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:tros.tros_base.geometry.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Scene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  ::protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scene& Scene::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_base_5fgeometry_2eproto::scc_info_Scene.base);
  return *internal_default_instance();
}


void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.geometry.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.geometry.Scene)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tros.tros_base.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tros.tros_base.geometry.Shape shapes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_shapes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.geometry.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.geometry.Scene)
  return false;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.geometry.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .tros.tros_base.geometry.Shape shapes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shapes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->shapes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.geometry.Scene)
}

::google::protobuf::uint8* Scene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.geometry.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .tros.tros_base.geometry.Shape shapes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shapes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->shapes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.geometry.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.geometry.Scene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tros.tros_base.geometry.Shape shapes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->shapes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shapes(static_cast<int>(i)));
    }
  }

  // .tros.tros_base.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.geometry.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.geometry.Scene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.geometry.Scene)
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.geometry.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
  if (from.has_header()) {
    mutable_header()->::tros::tros_base::common::Header::MergeFrom(from.header());
  }
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.geometry.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.geometry.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  return true;
}

void Scene::Swap(Scene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scene::InternalSwap(Scene* other) {
  using std::swap;
  CastToBase(&shapes_)->InternalSwap(CastToBase(&other->shapes_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_base_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry
}  // namespace tros_base
}  // namespace tros
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Point* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Point >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::PointCloud* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::PointCloud >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::PointCloud >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Line* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Line >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Line >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Polygen* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Polygen >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Polygen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Oval* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Oval >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Oval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Sphere* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Sphere >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Sphere >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Cone* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Cone >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Cone >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Extrusion* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Extrusion >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Extrusion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::TransformationFrame* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::TransformationFrame >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::TransformationFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Shape* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Shape >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Shape >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::geometry::Scene* Arena::CreateMaybeMessage< ::tros::tros_base::geometry::Scene >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::geometry::Scene >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
