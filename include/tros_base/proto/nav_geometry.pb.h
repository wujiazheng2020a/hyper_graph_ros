// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav_geometry.proto

#ifndef PROTOBUF_INCLUDED_nav_5fgeometry_2eproto
#define PROTOBUF_INCLUDED_nav_5fgeometry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nav_5fgeometry_2eproto 

namespace protobuf_nav_5fgeometry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nav_5fgeometry_2eproto
namespace tros {
namespace tros_base {
namespace nav_geometry {
class Orientation;
class OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class PoseArray;
class PoseArrayDefaultTypeInternal;
extern PoseArrayDefaultTypeInternal _PoseArray_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace nav_geometry
}  // namespace tros_base
}  // namespace tros
namespace google {
namespace protobuf {
template<> ::tros::tros_base::nav_geometry::Orientation* Arena::CreateMaybeMessage<::tros::tros_base::nav_geometry::Orientation>(Arena*);
template<> ::tros::tros_base::nav_geometry::Pose* Arena::CreateMaybeMessage<::tros::tros_base::nav_geometry::Pose>(Arena*);
template<> ::tros::tros_base::nav_geometry::PoseArray* Arena::CreateMaybeMessage<::tros::tros_base::nav_geometry::PoseArray>(Arena*);
template<> ::tros::tros_base::nav_geometry::Position* Arena::CreateMaybeMessage<::tros::tros_base::nav_geometry::Position>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tros {
namespace tros_base {
namespace nav_geometry {

// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tros.tros_base.nav_geometry.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(NULL);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:tros.tros_base.nav_geometry.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nav_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Orientation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tros.tros_base.nav_geometry.Orientation) */ {
 public:
  Orientation();
  virtual ~Orientation();

  Orientation(const Orientation& from);

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(Orientation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Orientation* other);
  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Orientation* New() const final {
    return CreateMaybeMessage<Orientation>(NULL);
  }

  Orientation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Orientation& from);
  void MergeFrom(const Orientation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  double w() const;
  void set_w(double value);

  // @@protoc_insertion_point(class_scope:tros.tros_base.nav_geometry.Orientation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nav_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tros.tros_base.nav_geometry.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(NULL);
  }

  Pose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tros.tros_base.nav_geometry.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::tros::tros_base::nav_geometry::Position& _internal_position() const;
  public:
  const ::tros::tros_base::nav_geometry::Position& position() const;
  ::tros::tros_base::nav_geometry::Position* release_position();
  ::tros::tros_base::nav_geometry::Position* mutable_position();
  void set_allocated_position(::tros::tros_base::nav_geometry::Position* position);

  // .tros.tros_base.nav_geometry.Orientation orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  private:
  const ::tros::tros_base::nav_geometry::Orientation& _internal_orientation() const;
  public:
  const ::tros::tros_base::nav_geometry::Orientation& orientation() const;
  ::tros::tros_base::nav_geometry::Orientation* release_orientation();
  ::tros::tros_base::nav_geometry::Orientation* mutable_orientation();
  void set_allocated_orientation(::tros::tros_base::nav_geometry::Orientation* orientation);

  // @@protoc_insertion_point(class_scope:tros.tros_base.nav_geometry.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tros::tros_base::nav_geometry::Position* position_;
  ::tros::tros_base::nav_geometry::Orientation* orientation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nav_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoseArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tros.tros_base.nav_geometry.PoseArray) */ {
 public:
  PoseArray();
  virtual ~PoseArray();

  PoseArray(const PoseArray& from);

  inline PoseArray& operator=(const PoseArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoseArray(PoseArray&& from) noexcept
    : PoseArray() {
    *this = ::std::move(from);
  }

  inline PoseArray& operator=(PoseArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseArray* internal_default_instance() {
    return reinterpret_cast<const PoseArray*>(
               &_PoseArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PoseArray* other);
  friend void swap(PoseArray& a, PoseArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoseArray* New() const final {
    return CreateMaybeMessage<PoseArray>(NULL);
  }

  PoseArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoseArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoseArray& from);
  void MergeFrom(const PoseArray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tros.tros_base.nav_geometry.Pose poses = 2;
  int poses_size() const;
  void clear_poses();
  static const int kPosesFieldNumber = 2;
  ::tros::tros_base::nav_geometry::Pose* mutable_poses(int index);
  ::google::protobuf::RepeatedPtrField< ::tros::tros_base::nav_geometry::Pose >*
      mutable_poses();
  const ::tros::tros_base::nav_geometry::Pose& poses(int index) const;
  ::tros::tros_base::nav_geometry::Pose* add_poses();
  const ::google::protobuf::RepeatedPtrField< ::tros::tros_base::nav_geometry::Pose >&
      poses() const;

  // .tros.tros_base.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::tros::tros_base::common::Header& _internal_header() const;
  public:
  const ::tros::tros_base::common::Header& header() const;
  ::tros::tros_base::common::Header* release_header();
  ::tros::tros_base::common::Header* mutable_header();
  void set_allocated_header(::tros::tros_base::common::Header* header);

  // @@protoc_insertion_point(class_scope:tros.tros_base.nav_geometry.PoseArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tros::tros_base::nav_geometry::Pose > poses_;
  ::tros::tros_base::common::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nav_5fgeometry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// double x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Position.x)
  return x_;
}
inline void Position::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.nav_geometry.Position.x)
}

// double y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Position.y)
  return y_;
}
inline void Position::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.nav_geometry.Position.y)
}

// double z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Position.z)
  return z_;
}
inline void Position::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.nav_geometry.Position.z)
}

// -------------------------------------------------------------------

// Orientation

// double x = 1;
inline void Orientation::clear_x() {
  x_ = 0;
}
inline double Orientation::x() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Orientation.x)
  return x_;
}
inline void Orientation::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.nav_geometry.Orientation.x)
}

// double y = 2;
inline void Orientation::clear_y() {
  y_ = 0;
}
inline double Orientation::y() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Orientation.y)
  return y_;
}
inline void Orientation::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.nav_geometry.Orientation.y)
}

// double z = 3;
inline void Orientation::clear_z() {
  z_ = 0;
}
inline double Orientation::z() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Orientation.z)
  return z_;
}
inline void Orientation::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.nav_geometry.Orientation.z)
}

// double w = 4;
inline void Orientation::clear_w() {
  w_ = 0;
}
inline double Orientation::w() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Orientation.w)
  return w_;
}
inline void Orientation::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.nav_geometry.Orientation.w)
}

// -------------------------------------------------------------------

// Pose

// .tros.tros_base.nav_geometry.Position position = 1;
inline bool Pose::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Pose::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::tros::tros_base::nav_geometry::Position& Pose::_internal_position() const {
  return *position_;
}
inline const ::tros::tros_base::nav_geometry::Position& Pose::position() const {
  const ::tros::tros_base::nav_geometry::Position* p = position_;
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Pose.position)
  return p != NULL ? *p : *reinterpret_cast<const ::tros::tros_base::nav_geometry::Position*>(
      &::tros::tros_base::nav_geometry::_Position_default_instance_);
}
inline ::tros::tros_base::nav_geometry::Position* Pose::release_position() {
  // @@protoc_insertion_point(field_release:tros.tros_base.nav_geometry.Pose.position)
  
  ::tros::tros_base::nav_geometry::Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::tros::tros_base::nav_geometry::Position* Pose::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::tros::tros_base::nav_geometry::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tros.tros_base.nav_geometry.Pose.position)
  return position_;
}
inline void Pose::set_allocated_position(::tros::tros_base::nav_geometry::Position* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.nav_geometry.Pose.position)
}

// .tros.tros_base.nav_geometry.Orientation orientation = 2;
inline bool Pose::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
inline void Pose::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
}
inline const ::tros::tros_base::nav_geometry::Orientation& Pose::_internal_orientation() const {
  return *orientation_;
}
inline const ::tros::tros_base::nav_geometry::Orientation& Pose::orientation() const {
  const ::tros::tros_base::nav_geometry::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.Pose.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::tros::tros_base::nav_geometry::Orientation*>(
      &::tros::tros_base::nav_geometry::_Orientation_default_instance_);
}
inline ::tros::tros_base::nav_geometry::Orientation* Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:tros.tros_base.nav_geometry.Pose.orientation)
  
  ::tros::tros_base::nav_geometry::Orientation* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::tros::tros_base::nav_geometry::Orientation* Pose::mutable_orientation() {
  
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::tros::tros_base::nav_geometry::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tros.tros_base.nav_geometry.Pose.orientation)
  return orientation_;
}
inline void Pose::set_allocated_orientation(::tros::tros_base::nav_geometry::Orientation* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_;
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.nav_geometry.Pose.orientation)
}

// -------------------------------------------------------------------

// PoseArray

// .tros.tros_base.common.Header header = 1;
inline bool PoseArray::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tros::tros_base::common::Header& PoseArray::_internal_header() const {
  return *header_;
}
inline const ::tros::tros_base::common::Header& PoseArray::header() const {
  const ::tros::tros_base::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.PoseArray.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tros::tros_base::common::Header*>(
      &::tros::tros_base::common::_Header_default_instance_);
}
inline ::tros::tros_base::common::Header* PoseArray::release_header() {
  // @@protoc_insertion_point(field_release:tros.tros_base.nav_geometry.PoseArray.header)
  
  ::tros::tros_base::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tros::tros_base::common::Header* PoseArray::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::tros::tros_base::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tros.tros_base.nav_geometry.PoseArray.header)
  return header_;
}
inline void PoseArray::set_allocated_header(::tros::tros_base::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.nav_geometry.PoseArray.header)
}

// repeated .tros.tros_base.nav_geometry.Pose poses = 2;
inline int PoseArray::poses_size() const {
  return poses_.size();
}
inline void PoseArray::clear_poses() {
  poses_.Clear();
}
inline ::tros::tros_base::nav_geometry::Pose* PoseArray::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:tros.tros_base.nav_geometry.PoseArray.poses)
  return poses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tros::tros_base::nav_geometry::Pose >*
PoseArray::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:tros.tros_base.nav_geometry.PoseArray.poses)
  return &poses_;
}
inline const ::tros::tros_base::nav_geometry::Pose& PoseArray::poses(int index) const {
  // @@protoc_insertion_point(field_get:tros.tros_base.nav_geometry.PoseArray.poses)
  return poses_.Get(index);
}
inline ::tros::tros_base::nav_geometry::Pose* PoseArray::add_poses() {
  // @@protoc_insertion_point(field_add:tros.tros_base.nav_geometry.PoseArray.poses)
  return poses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tros::tros_base::nav_geometry::Pose >&
PoseArray::poses() const {
  // @@protoc_insertion_point(field_list:tros.tros_base.nav_geometry.PoseArray.poses)
  return poses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nav_geometry
}  // namespace tros_base
}  // namespace tros

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nav_5fgeometry_2eproto
