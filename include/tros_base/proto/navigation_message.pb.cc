// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navigation_message.proto

#include "navigation_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_base_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_base_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationFrame;
}  // namespace protobuf_base_5fgeometry_2eproto
namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_common_2eproto
namespace protobuf_navigation_5fmessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_navigation_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OccupancyGrid;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_navigation_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OccupancyVoxel;
}  // namespace protobuf_navigation_5fmessage_2eproto
namespace tros {
namespace tros_base {
namespace navigation {
class OccupancyGridDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OccupancyGrid>
      _instance;
} _OccupancyGrid_default_instance_;
class OccupancyVoxelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OccupancyVoxel>
      _instance;
} _OccupancyVoxel_default_instance_;
class NavigationMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationMsg>
      _instance;
  const ::tros::tros_base::navigation::OccupancyGrid* occupancy_grid_;
  const ::tros::tros_base::navigation::OccupancyVoxel* occupancy_voxel_;
} _NavigationMsg_default_instance_;
}  // namespace navigation
}  // namespace tros_base
}  // namespace tros
namespace protobuf_navigation_5fmessage_2eproto {
static void InitDefaultsOccupancyGrid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::navigation::_OccupancyGrid_default_instance_;
    new (ptr) ::tros::tros_base::navigation::OccupancyGrid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::navigation::OccupancyGrid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OccupancyGrid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOccupancyGrid}, {}};

static void InitDefaultsOccupancyVoxel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::navigation::_OccupancyVoxel_default_instance_;
    new (ptr) ::tros::tros_base::navigation::OccupancyVoxel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::navigation::OccupancyVoxel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OccupancyVoxel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOccupancyVoxel}, {}};

static void InitDefaultsNavigationMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tros::tros_base::navigation::_NavigationMsg_default_instance_;
    new (ptr) ::tros::tros_base::navigation::NavigationMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tros::tros_base::navigation::NavigationMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_NavigationMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsNavigationMsg}, {
      &protobuf_common_2eproto::scc_info_Header.base,
      &protobuf_navigation_5fmessage_2eproto::scc_info_OccupancyGrid.base,
      &protobuf_navigation_5fmessage_2eproto::scc_info_OccupancyVoxel.base,
      &protobuf_base_5fgeometry_2eproto::scc_info_TransformationFrame.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OccupancyGrid.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OccupancyVoxel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationMsg.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyGrid, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyGrid, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyGrid, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyGrid, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyVoxel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyVoxel, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyVoxel, x_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyVoxel, y_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyVoxel, z_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::OccupancyVoxel, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::NavigationMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::NavigationMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::NavigationMsg, header_),
  offsetof(::tros::tros_base::navigation::NavigationMsgDefaultTypeInternal, occupancy_grid_),
  offsetof(::tros::tros_base::navigation::NavigationMsgDefaultTypeInternal, occupancy_voxel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::NavigationMsg, transformation_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tros::tros_base::navigation::NavigationMsg, type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tros::tros_base::navigation::OccupancyGrid)},
  { 9, -1, sizeof(::tros::tros_base::navigation::OccupancyVoxel)},
  { 19, -1, sizeof(::tros::tros_base::navigation::NavigationMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::navigation::_OccupancyGrid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::navigation::_OccupancyVoxel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tros::tros_base::navigation::_NavigationMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "navigation_message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030navigation_message.proto\022\031tros.tros_ba"
      "se.navigation\032\014common.proto\032\023base_geomet"
      "ry.proto\"P\n\rOccupancyGrid\022\022\n\nresolution\030"
      "\001 \001(\001\022\r\n\005width\030\002 \001(\004\022\016\n\006height\030\003 \001(\004\022\014\n\004"
      "data\030\004 \001(\014\"e\n\016OccupancyVoxel\022\022\n\nresoluti"
      "on\030\001 \001(\001\022\017\n\007x_width\030\002 \001(\004\022\017\n\007y_width\030\003 \001"
      "(\004\022\017\n\007z_width\030\004 \001(\004\022\014\n\004data\030\005 \001(\014\"\234\002\n\rNa"
      "vigationMsg\022-\n\006header\030\001 \001(\0132\035.tros.tros_"
      "base.common.Header\022B\n\016occupancy_grid\030\002 \001"
      "(\0132(.tros.tros_base.navigation.Occupancy"
      "GridH\000\022D\n\017occupancy_voxel\030\003 \001(\0132).tros.t"
      "ros_base.navigation.OccupancyVoxelH\000\022J\n\024"
      "transformation_frame\030\004 \001(\0132,.tros.tros_b"
      "ase.geometry.TransformationFrameB\006\n\004type"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "navigation_message.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_base_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_navigation_5fmessage_2eproto
namespace tros {
namespace tros_base {
namespace navigation {

// ===================================================================

void OccupancyGrid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OccupancyGrid::kResolutionFieldNumber;
const int OccupancyGrid::kWidthFieldNumber;
const int OccupancyGrid::kHeightFieldNumber;
const int OccupancyGrid::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OccupancyGrid::OccupancyGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_navigation_5fmessage_2eproto::scc_info_OccupancyGrid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.navigation.OccupancyGrid)
}
OccupancyGrid::OccupancyGrid(const OccupancyGrid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.navigation.OccupancyGrid)
}

void OccupancyGrid::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(height_));
}

OccupancyGrid::~OccupancyGrid() {
  // @@protoc_insertion_point(destructor:tros.tros_base.navigation.OccupancyGrid)
  SharedDtor();
}

void OccupancyGrid::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OccupancyGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OccupancyGrid::descriptor() {
  ::protobuf_navigation_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_navigation_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OccupancyGrid& OccupancyGrid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_navigation_5fmessage_2eproto::scc_info_OccupancyGrid.base);
  return *internal_default_instance();
}


void OccupancyGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.navigation.OccupancyGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool OccupancyGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.navigation.OccupancyGrid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double resolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.navigation.OccupancyGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.navigation.OccupancyGrid)
  return false;
#undef DO_
}

void OccupancyGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.navigation.OccupancyGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->resolution(), output);
  }

  // uint64 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->width(), output);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.navigation.OccupancyGrid)
}

::google::protobuf::uint8* OccupancyGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.navigation.OccupancyGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->resolution(), target);
  }

  // uint64 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->width(), target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.navigation.OccupancyGrid)
  return target;
}

size_t OccupancyGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.navigation.OccupancyGrid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // double resolution = 1;
  if (this->resolution() != 0) {
    total_size += 1 + 8;
  }

  // uint64 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->width());
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupancyGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.navigation.OccupancyGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupancyGrid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OccupancyGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.navigation.OccupancyGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.navigation.OccupancyGrid)
    MergeFrom(*source);
  }
}

void OccupancyGrid::MergeFrom(const OccupancyGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.navigation.OccupancyGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void OccupancyGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.navigation.OccupancyGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupancyGrid::CopyFrom(const OccupancyGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.navigation.OccupancyGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancyGrid::IsInitialized() const {
  return true;
}

void OccupancyGrid::Swap(OccupancyGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OccupancyGrid::InternalSwap(OccupancyGrid* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resolution_, other->resolution_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OccupancyGrid::GetMetadata() const {
  protobuf_navigation_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_navigation_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OccupancyVoxel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OccupancyVoxel::kResolutionFieldNumber;
const int OccupancyVoxel::kXWidthFieldNumber;
const int OccupancyVoxel::kYWidthFieldNumber;
const int OccupancyVoxel::kZWidthFieldNumber;
const int OccupancyVoxel::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OccupancyVoxel::OccupancyVoxel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_navigation_5fmessage_2eproto::scc_info_OccupancyVoxel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.navigation.OccupancyVoxel)
}
OccupancyVoxel::OccupancyVoxel(const OccupancyVoxel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_width_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(z_width_));
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.navigation.OccupancyVoxel)
}

void OccupancyVoxel::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_width_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(z_width_));
}

OccupancyVoxel::~OccupancyVoxel() {
  // @@protoc_insertion_point(destructor:tros.tros_base.navigation.OccupancyVoxel)
  SharedDtor();
}

void OccupancyVoxel::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OccupancyVoxel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OccupancyVoxel::descriptor() {
  ::protobuf_navigation_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_navigation_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OccupancyVoxel& OccupancyVoxel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_navigation_5fmessage_2eproto::scc_info_OccupancyVoxel.base);
  return *internal_default_instance();
}


void OccupancyVoxel::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.navigation.OccupancyVoxel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_width_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(z_width_));
  _internal_metadata_.Clear();
}

bool OccupancyVoxel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.navigation.OccupancyVoxel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double resolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 x_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &x_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 y_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &y_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 z_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &z_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.navigation.OccupancyVoxel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.navigation.OccupancyVoxel)
  return false;
#undef DO_
}

void OccupancyVoxel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.navigation.OccupancyVoxel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->resolution(), output);
  }

  // uint64 x_width = 2;
  if (this->x_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->x_width(), output);
  }

  // uint64 y_width = 3;
  if (this->y_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->y_width(), output);
  }

  // uint64 z_width = 4;
  if (this->z_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->z_width(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.navigation.OccupancyVoxel)
}

::google::protobuf::uint8* OccupancyVoxel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.navigation.OccupancyVoxel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->resolution(), target);
  }

  // uint64 x_width = 2;
  if (this->x_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->x_width(), target);
  }

  // uint64 y_width = 3;
  if (this->y_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->y_width(), target);
  }

  // uint64 z_width = 4;
  if (this->z_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->z_width(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.navigation.OccupancyVoxel)
  return target;
}

size_t OccupancyVoxel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.navigation.OccupancyVoxel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // double resolution = 1;
  if (this->resolution() != 0) {
    total_size += 1 + 8;
  }

  // uint64 x_width = 2;
  if (this->x_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->x_width());
  }

  // uint64 y_width = 3;
  if (this->y_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->y_width());
  }

  // uint64 z_width = 4;
  if (this->z_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->z_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupancyVoxel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.navigation.OccupancyVoxel)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupancyVoxel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OccupancyVoxel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.navigation.OccupancyVoxel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.navigation.OccupancyVoxel)
    MergeFrom(*source);
  }
}

void OccupancyVoxel::MergeFrom(const OccupancyVoxel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.navigation.OccupancyVoxel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
  if (from.x_width() != 0) {
    set_x_width(from.x_width());
  }
  if (from.y_width() != 0) {
    set_y_width(from.y_width());
  }
  if (from.z_width() != 0) {
    set_z_width(from.z_width());
  }
}

void OccupancyVoxel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.navigation.OccupancyVoxel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupancyVoxel::CopyFrom(const OccupancyVoxel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.navigation.OccupancyVoxel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancyVoxel::IsInitialized() const {
  return true;
}

void OccupancyVoxel::Swap(OccupancyVoxel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OccupancyVoxel::InternalSwap(OccupancyVoxel* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resolution_, other->resolution_);
  swap(x_width_, other->x_width_);
  swap(y_width_, other->y_width_);
  swap(z_width_, other->z_width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OccupancyVoxel::GetMetadata() const {
  protobuf_navigation_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_navigation_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationMsg::InitAsDefaultInstance() {
  ::tros::tros_base::navigation::_NavigationMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::tros::tros_base::common::Header*>(
      ::tros::tros_base::common::Header::internal_default_instance());
  ::tros::tros_base::navigation::_NavigationMsg_default_instance_.occupancy_grid_ = const_cast< ::tros::tros_base::navigation::OccupancyGrid*>(
      ::tros::tros_base::navigation::OccupancyGrid::internal_default_instance());
  ::tros::tros_base::navigation::_NavigationMsg_default_instance_.occupancy_voxel_ = const_cast< ::tros::tros_base::navigation::OccupancyVoxel*>(
      ::tros::tros_base::navigation::OccupancyVoxel::internal_default_instance());
  ::tros::tros_base::navigation::_NavigationMsg_default_instance_._instance.get_mutable()->transformation_frame_ = const_cast< ::tros::tros_base::geometry::TransformationFrame*>(
      ::tros::tros_base::geometry::TransformationFrame::internal_default_instance());
}
void NavigationMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void NavigationMsg::set_allocated_occupancy_grid(::tros::tros_base::navigation::OccupancyGrid* occupancy_grid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (occupancy_grid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      occupancy_grid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occupancy_grid, submessage_arena);
    }
    set_has_occupancy_grid();
    type_.occupancy_grid_ = occupancy_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.navigation.NavigationMsg.occupancy_grid)
}
void NavigationMsg::set_allocated_occupancy_voxel(::tros::tros_base::navigation::OccupancyVoxel* occupancy_voxel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (occupancy_voxel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      occupancy_voxel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occupancy_voxel, submessage_arena);
    }
    set_has_occupancy_voxel();
    type_.occupancy_voxel_ = occupancy_voxel;
  }
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.navigation.NavigationMsg.occupancy_voxel)
}
void NavigationMsg::clear_transformation_frame() {
  if (GetArenaNoVirtual() == NULL && transformation_frame_ != NULL) {
    delete transformation_frame_;
  }
  transformation_frame_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationMsg::kHeaderFieldNumber;
const int NavigationMsg::kOccupancyGridFieldNumber;
const int NavigationMsg::kOccupancyVoxelFieldNumber;
const int NavigationMsg::kTransformationFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationMsg::NavigationMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_navigation_5fmessage_2eproto::scc_info_NavigationMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tros.tros_base.navigation.NavigationMsg)
}
NavigationMsg::NavigationMsg(const NavigationMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::tros::tros_base::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_transformation_frame()) {
    transformation_frame_ = new ::tros::tros_base::geometry::TransformationFrame(*from.transformation_frame_);
  } else {
    transformation_frame_ = NULL;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kOccupancyGrid: {
      mutable_occupancy_grid()->::tros::tros_base::navigation::OccupancyGrid::MergeFrom(from.occupancy_grid());
      break;
    }
    case kOccupancyVoxel: {
      mutable_occupancy_voxel()->::tros::tros_base::navigation::OccupancyVoxel::MergeFrom(from.occupancy_voxel());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tros.tros_base.navigation.NavigationMsg)
}

void NavigationMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transformation_frame_) -
      reinterpret_cast<char*>(&header_)) + sizeof(transformation_frame_));
  clear_has_type();
}

NavigationMsg::~NavigationMsg() {
  // @@protoc_insertion_point(destructor:tros.tros_base.navigation.NavigationMsg)
  SharedDtor();
}

void NavigationMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete transformation_frame_;
  if (has_type()) {
    clear_type();
  }
}

void NavigationMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationMsg::descriptor() {
  ::protobuf_navigation_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_navigation_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationMsg& NavigationMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_navigation_5fmessage_2eproto::scc_info_NavigationMsg.base);
  return *internal_default_instance();
}


void NavigationMsg::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:tros.tros_base.navigation.NavigationMsg)
  switch (type_case()) {
    case kOccupancyGrid: {
      delete type_.occupancy_grid_;
      break;
    }
    case kOccupancyVoxel: {
      delete type_.occupancy_voxel_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void NavigationMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:tros.tros_base.navigation.NavigationMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && transformation_frame_ != NULL) {
    delete transformation_frame_;
  }
  transformation_frame_ = NULL;
  clear_type();
  _internal_metadata_.Clear();
}

bool NavigationMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tros.tros_base.navigation.NavigationMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tros.tros_base.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.navigation.OccupancyGrid occupancy_grid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occupancy_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.navigation.OccupancyVoxel occupancy_voxel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occupancy_voxel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tros.tros_base.geometry.TransformationFrame transformation_frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transformation_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tros.tros_base.navigation.NavigationMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tros.tros_base.navigation.NavigationMsg)
  return false;
#undef DO_
}

void NavigationMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tros.tros_base.navigation.NavigationMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .tros.tros_base.navigation.OccupancyGrid occupancy_grid = 2;
  if (has_occupancy_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_occupancy_grid(), output);
  }

  // .tros.tros_base.navigation.OccupancyVoxel occupancy_voxel = 3;
  if (has_occupancy_voxel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_occupancy_voxel(), output);
  }

  // .tros.tros_base.geometry.TransformationFrame transformation_frame = 4;
  if (this->has_transformation_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_transformation_frame(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tros.tros_base.navigation.NavigationMsg)
}

::google::protobuf::uint8* NavigationMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tros.tros_base.navigation.NavigationMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tros.tros_base.common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .tros.tros_base.navigation.OccupancyGrid occupancy_grid = 2;
  if (has_occupancy_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_occupancy_grid(), deterministic, target);
  }

  // .tros.tros_base.navigation.OccupancyVoxel occupancy_voxel = 3;
  if (has_occupancy_voxel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_occupancy_voxel(), deterministic, target);
  }

  // .tros.tros_base.geometry.TransformationFrame transformation_frame = 4;
  if (this->has_transformation_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_transformation_frame(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tros.tros_base.navigation.NavigationMsg)
  return target;
}

size_t NavigationMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tros.tros_base.navigation.NavigationMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tros.tros_base.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tros.tros_base.geometry.TransformationFrame transformation_frame = 4;
  if (this->has_transformation_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transformation_frame_);
  }

  switch (type_case()) {
    // .tros.tros_base.navigation.OccupancyGrid occupancy_grid = 2;
    case kOccupancyGrid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.occupancy_grid_);
      break;
    }
    // .tros.tros_base.navigation.OccupancyVoxel occupancy_voxel = 3;
    case kOccupancyVoxel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.occupancy_voxel_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tros.tros_base.navigation.NavigationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tros.tros_base.navigation.NavigationMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tros.tros_base.navigation.NavigationMsg)
    MergeFrom(*source);
  }
}

void NavigationMsg::MergeFrom(const NavigationMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tros.tros_base.navigation.NavigationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::tros::tros_base::common::Header::MergeFrom(from.header());
  }
  if (from.has_transformation_frame()) {
    mutable_transformation_frame()->::tros::tros_base::geometry::TransformationFrame::MergeFrom(from.transformation_frame());
  }
  switch (from.type_case()) {
    case kOccupancyGrid: {
      mutable_occupancy_grid()->::tros::tros_base::navigation::OccupancyGrid::MergeFrom(from.occupancy_grid());
      break;
    }
    case kOccupancyVoxel: {
      mutable_occupancy_voxel()->::tros::tros_base::navigation::OccupancyVoxel::MergeFrom(from.occupancy_voxel());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void NavigationMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tros.tros_base.navigation.NavigationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationMsg::CopyFrom(const NavigationMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tros.tros_base.navigation.NavigationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationMsg::IsInitialized() const {
  return true;
}

void NavigationMsg::Swap(NavigationMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationMsg::InternalSwap(NavigationMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(transformation_frame_, other->transformation_frame_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationMsg::GetMetadata() const {
  protobuf_navigation_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_navigation_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace navigation
}  // namespace tros_base
}  // namespace tros
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::navigation::OccupancyGrid* Arena::CreateMaybeMessage< ::tros::tros_base::navigation::OccupancyGrid >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::navigation::OccupancyGrid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::navigation::OccupancyVoxel* Arena::CreateMaybeMessage< ::tros::tros_base::navigation::OccupancyVoxel >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::navigation::OccupancyVoxel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tros::tros_base::navigation::NavigationMsg* Arena::CreateMaybeMessage< ::tros::tros_base::navigation::NavigationMsg >(Arena* arena) {
  return Arena::CreateInternal< ::tros::tros_base::navigation::NavigationMsg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
