// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navigation_message.proto

#ifndef PROTOBUF_INCLUDED_navigation_5fmessage_2eproto
#define PROTOBUF_INCLUDED_navigation_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "base_geometry.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_navigation_5fmessage_2eproto 

namespace protobuf_navigation_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_navigation_5fmessage_2eproto
namespace tros {
namespace tros_base {
namespace navigation {
class NavigationMsg;
class NavigationMsgDefaultTypeInternal;
extern NavigationMsgDefaultTypeInternal _NavigationMsg_default_instance_;
class OccupancyGrid;
class OccupancyGridDefaultTypeInternal;
extern OccupancyGridDefaultTypeInternal _OccupancyGrid_default_instance_;
class OccupancyVoxel;
class OccupancyVoxelDefaultTypeInternal;
extern OccupancyVoxelDefaultTypeInternal _OccupancyVoxel_default_instance_;
}  // namespace navigation
}  // namespace tros_base
}  // namespace tros
namespace google {
namespace protobuf {
template<> ::tros::tros_base::navigation::NavigationMsg* Arena::CreateMaybeMessage<::tros::tros_base::navigation::NavigationMsg>(Arena*);
template<> ::tros::tros_base::navigation::OccupancyGrid* Arena::CreateMaybeMessage<::tros::tros_base::navigation::OccupancyGrid>(Arena*);
template<> ::tros::tros_base::navigation::OccupancyVoxel* Arena::CreateMaybeMessage<::tros::tros_base::navigation::OccupancyVoxel>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tros {
namespace tros_base {
namespace navigation {

// ===================================================================

class OccupancyGrid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tros.tros_base.navigation.OccupancyGrid) */ {
 public:
  OccupancyGrid();
  virtual ~OccupancyGrid();

  OccupancyGrid(const OccupancyGrid& from);

  inline OccupancyGrid& operator=(const OccupancyGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OccupancyGrid(OccupancyGrid&& from) noexcept
    : OccupancyGrid() {
    *this = ::std::move(from);
  }

  inline OccupancyGrid& operator=(OccupancyGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OccupancyGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OccupancyGrid* internal_default_instance() {
    return reinterpret_cast<const OccupancyGrid*>(
               &_OccupancyGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OccupancyGrid* other);
  friend void swap(OccupancyGrid& a, OccupancyGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OccupancyGrid* New() const final {
    return CreateMaybeMessage<OccupancyGrid>(NULL);
  }

  OccupancyGrid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OccupancyGrid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OccupancyGrid& from);
  void MergeFrom(const OccupancyGrid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OccupancyGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // double resolution = 1;
  void clear_resolution();
  static const int kResolutionFieldNumber = 1;
  double resolution() const;
  void set_resolution(double value);

  // uint64 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint64 width() const;
  void set_width(::google::protobuf::uint64 value);

  // uint64 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tros.tros_base.navigation.OccupancyGrid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  double resolution_;
  ::google::protobuf::uint64 width_;
  ::google::protobuf::uint64 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_navigation_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OccupancyVoxel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tros.tros_base.navigation.OccupancyVoxel) */ {
 public:
  OccupancyVoxel();
  virtual ~OccupancyVoxel();

  OccupancyVoxel(const OccupancyVoxel& from);

  inline OccupancyVoxel& operator=(const OccupancyVoxel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OccupancyVoxel(OccupancyVoxel&& from) noexcept
    : OccupancyVoxel() {
    *this = ::std::move(from);
  }

  inline OccupancyVoxel& operator=(OccupancyVoxel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OccupancyVoxel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OccupancyVoxel* internal_default_instance() {
    return reinterpret_cast<const OccupancyVoxel*>(
               &_OccupancyVoxel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OccupancyVoxel* other);
  friend void swap(OccupancyVoxel& a, OccupancyVoxel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OccupancyVoxel* New() const final {
    return CreateMaybeMessage<OccupancyVoxel>(NULL);
  }

  OccupancyVoxel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OccupancyVoxel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OccupancyVoxel& from);
  void MergeFrom(const OccupancyVoxel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OccupancyVoxel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // double resolution = 1;
  void clear_resolution();
  static const int kResolutionFieldNumber = 1;
  double resolution() const;
  void set_resolution(double value);

  // uint64 x_width = 2;
  void clear_x_width();
  static const int kXWidthFieldNumber = 2;
  ::google::protobuf::uint64 x_width() const;
  void set_x_width(::google::protobuf::uint64 value);

  // uint64 y_width = 3;
  void clear_y_width();
  static const int kYWidthFieldNumber = 3;
  ::google::protobuf::uint64 y_width() const;
  void set_y_width(::google::protobuf::uint64 value);

  // uint64 z_width = 4;
  void clear_z_width();
  static const int kZWidthFieldNumber = 4;
  ::google::protobuf::uint64 z_width() const;
  void set_z_width(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tros.tros_base.navigation.OccupancyVoxel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  double resolution_;
  ::google::protobuf::uint64 x_width_;
  ::google::protobuf::uint64 y_width_;
  ::google::protobuf::uint64 z_width_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_navigation_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NavigationMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tros.tros_base.navigation.NavigationMsg) */ {
 public:
  NavigationMsg();
  virtual ~NavigationMsg();

  NavigationMsg(const NavigationMsg& from);

  inline NavigationMsg& operator=(const NavigationMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationMsg(NavigationMsg&& from) noexcept
    : NavigationMsg() {
    *this = ::std::move(from);
  }

  inline NavigationMsg& operator=(NavigationMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationMsg& default_instance();

  enum TypeCase {
    kOccupancyGrid = 2,
    kOccupancyVoxel = 3,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationMsg* internal_default_instance() {
    return reinterpret_cast<const NavigationMsg*>(
               &_NavigationMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NavigationMsg* other);
  friend void swap(NavigationMsg& a, NavigationMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationMsg* New() const final {
    return CreateMaybeMessage<NavigationMsg>(NULL);
  }

  NavigationMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavigationMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavigationMsg& from);
  void MergeFrom(const NavigationMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tros.tros_base.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::tros::tros_base::common::Header& _internal_header() const;
  public:
  const ::tros::tros_base::common::Header& header() const;
  ::tros::tros_base::common::Header* release_header();
  ::tros::tros_base::common::Header* mutable_header();
  void set_allocated_header(::tros::tros_base::common::Header* header);

  // .tros.tros_base.geometry.TransformationFrame transformation_frame = 4;
  bool has_transformation_frame() const;
  void clear_transformation_frame();
  static const int kTransformationFrameFieldNumber = 4;
  private:
  const ::tros::tros_base::geometry::TransformationFrame& _internal_transformation_frame() const;
  public:
  const ::tros::tros_base::geometry::TransformationFrame& transformation_frame() const;
  ::tros::tros_base::geometry::TransformationFrame* release_transformation_frame();
  ::tros::tros_base::geometry::TransformationFrame* mutable_transformation_frame();
  void set_allocated_transformation_frame(::tros::tros_base::geometry::TransformationFrame* transformation_frame);

  // .tros.tros_base.navigation.OccupancyGrid occupancy_grid = 2;
  bool has_occupancy_grid() const;
  void clear_occupancy_grid();
  static const int kOccupancyGridFieldNumber = 2;
  private:
  const ::tros::tros_base::navigation::OccupancyGrid& _internal_occupancy_grid() const;
  public:
  const ::tros::tros_base::navigation::OccupancyGrid& occupancy_grid() const;
  ::tros::tros_base::navigation::OccupancyGrid* release_occupancy_grid();
  ::tros::tros_base::navigation::OccupancyGrid* mutable_occupancy_grid();
  void set_allocated_occupancy_grid(::tros::tros_base::navigation::OccupancyGrid* occupancy_grid);

  // .tros.tros_base.navigation.OccupancyVoxel occupancy_voxel = 3;
  bool has_occupancy_voxel() const;
  void clear_occupancy_voxel();
  static const int kOccupancyVoxelFieldNumber = 3;
  private:
  const ::tros::tros_base::navigation::OccupancyVoxel& _internal_occupancy_voxel() const;
  public:
  const ::tros::tros_base::navigation::OccupancyVoxel& occupancy_voxel() const;
  ::tros::tros_base::navigation::OccupancyVoxel* release_occupancy_voxel();
  ::tros::tros_base::navigation::OccupancyVoxel* mutable_occupancy_voxel();
  void set_allocated_occupancy_voxel(::tros::tros_base::navigation::OccupancyVoxel* occupancy_voxel);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:tros.tros_base.navigation.NavigationMsg)
 private:
  void set_has_occupancy_grid();
  void set_has_occupancy_voxel();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tros::tros_base::common::Header* header_;
  ::tros::tros_base::geometry::TransformationFrame* transformation_frame_;
  union TypeUnion {
    TypeUnion() {}
    ::tros::tros_base::navigation::OccupancyGrid* occupancy_grid_;
    ::tros::tros_base::navigation::OccupancyVoxel* occupancy_voxel_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_navigation_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OccupancyGrid

// double resolution = 1;
inline void OccupancyGrid::clear_resolution() {
  resolution_ = 0;
}
inline double OccupancyGrid::resolution() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyGrid.resolution)
  return resolution_;
}
inline void OccupancyGrid::set_resolution(double value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyGrid.resolution)
}

// uint64 width = 2;
inline void OccupancyGrid::clear_width() {
  width_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OccupancyGrid::width() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyGrid.width)
  return width_;
}
inline void OccupancyGrid::set_width(::google::protobuf::uint64 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyGrid.width)
}

// uint64 height = 3;
inline void OccupancyGrid::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OccupancyGrid::height() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyGrid.height)
  return height_;
}
inline void OccupancyGrid::set_height(::google::protobuf::uint64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyGrid.height)
}

// bytes data = 4;
inline void OccupancyGrid::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OccupancyGrid::data() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyGrid.data)
  return data_.GetNoArena();
}
inline void OccupancyGrid::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyGrid.data)
}
#if LANG_CXX11
inline void OccupancyGrid::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tros.tros_base.navigation.OccupancyGrid.data)
}
#endif
inline void OccupancyGrid::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tros.tros_base.navigation.OccupancyGrid.data)
}
inline void OccupancyGrid::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tros.tros_base.navigation.OccupancyGrid.data)
}
inline ::std::string* OccupancyGrid::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tros.tros_base.navigation.OccupancyGrid.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OccupancyGrid::release_data() {
  // @@protoc_insertion_point(field_release:tros.tros_base.navigation.OccupancyGrid.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OccupancyGrid::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.navigation.OccupancyGrid.data)
}

// -------------------------------------------------------------------

// OccupancyVoxel

// double resolution = 1;
inline void OccupancyVoxel::clear_resolution() {
  resolution_ = 0;
}
inline double OccupancyVoxel::resolution() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyVoxel.resolution)
  return resolution_;
}
inline void OccupancyVoxel::set_resolution(double value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyVoxel.resolution)
}

// uint64 x_width = 2;
inline void OccupancyVoxel::clear_x_width() {
  x_width_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OccupancyVoxel::x_width() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyVoxel.x_width)
  return x_width_;
}
inline void OccupancyVoxel::set_x_width(::google::protobuf::uint64 value) {
  
  x_width_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyVoxel.x_width)
}

// uint64 y_width = 3;
inline void OccupancyVoxel::clear_y_width() {
  y_width_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OccupancyVoxel::y_width() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyVoxel.y_width)
  return y_width_;
}
inline void OccupancyVoxel::set_y_width(::google::protobuf::uint64 value) {
  
  y_width_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyVoxel.y_width)
}

// uint64 z_width = 4;
inline void OccupancyVoxel::clear_z_width() {
  z_width_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OccupancyVoxel::z_width() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyVoxel.z_width)
  return z_width_;
}
inline void OccupancyVoxel::set_z_width(::google::protobuf::uint64 value) {
  
  z_width_ = value;
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyVoxel.z_width)
}

// bytes data = 5;
inline void OccupancyVoxel::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OccupancyVoxel::data() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.OccupancyVoxel.data)
  return data_.GetNoArena();
}
inline void OccupancyVoxel::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tros.tros_base.navigation.OccupancyVoxel.data)
}
#if LANG_CXX11
inline void OccupancyVoxel::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tros.tros_base.navigation.OccupancyVoxel.data)
}
#endif
inline void OccupancyVoxel::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tros.tros_base.navigation.OccupancyVoxel.data)
}
inline void OccupancyVoxel::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tros.tros_base.navigation.OccupancyVoxel.data)
}
inline ::std::string* OccupancyVoxel::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tros.tros_base.navigation.OccupancyVoxel.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OccupancyVoxel::release_data() {
  // @@protoc_insertion_point(field_release:tros.tros_base.navigation.OccupancyVoxel.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OccupancyVoxel::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.navigation.OccupancyVoxel.data)
}

// -------------------------------------------------------------------

// NavigationMsg

// .tros.tros_base.common.Header header = 1;
inline bool NavigationMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tros::tros_base::common::Header& NavigationMsg::_internal_header() const {
  return *header_;
}
inline const ::tros::tros_base::common::Header& NavigationMsg::header() const {
  const ::tros::tros_base::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.NavigationMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tros::tros_base::common::Header*>(
      &::tros::tros_base::common::_Header_default_instance_);
}
inline ::tros::tros_base::common::Header* NavigationMsg::release_header() {
  // @@protoc_insertion_point(field_release:tros.tros_base.navigation.NavigationMsg.header)
  
  ::tros::tros_base::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tros::tros_base::common::Header* NavigationMsg::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::tros::tros_base::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tros.tros_base.navigation.NavigationMsg.header)
  return header_;
}
inline void NavigationMsg::set_allocated_header(::tros::tros_base::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.navigation.NavigationMsg.header)
}

// .tros.tros_base.navigation.OccupancyGrid occupancy_grid = 2;
inline bool NavigationMsg::has_occupancy_grid() const {
  return type_case() == kOccupancyGrid;
}
inline void NavigationMsg::set_has_occupancy_grid() {
  _oneof_case_[0] = kOccupancyGrid;
}
inline void NavigationMsg::clear_occupancy_grid() {
  if (has_occupancy_grid()) {
    delete type_.occupancy_grid_;
    clear_has_type();
  }
}
inline const ::tros::tros_base::navigation::OccupancyGrid& NavigationMsg::_internal_occupancy_grid() const {
  return *type_.occupancy_grid_;
}
inline ::tros::tros_base::navigation::OccupancyGrid* NavigationMsg::release_occupancy_grid() {
  // @@protoc_insertion_point(field_release:tros.tros_base.navigation.NavigationMsg.occupancy_grid)
  if (has_occupancy_grid()) {
    clear_has_type();
      ::tros::tros_base::navigation::OccupancyGrid* temp = type_.occupancy_grid_;
    type_.occupancy_grid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tros::tros_base::navigation::OccupancyGrid& NavigationMsg::occupancy_grid() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.NavigationMsg.occupancy_grid)
  return has_occupancy_grid()
      ? *type_.occupancy_grid_
      : *reinterpret_cast< ::tros::tros_base::navigation::OccupancyGrid*>(&::tros::tros_base::navigation::_OccupancyGrid_default_instance_);
}
inline ::tros::tros_base::navigation::OccupancyGrid* NavigationMsg::mutable_occupancy_grid() {
  if (!has_occupancy_grid()) {
    clear_type();
    set_has_occupancy_grid();
    type_.occupancy_grid_ = CreateMaybeMessage< ::tros::tros_base::navigation::OccupancyGrid >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tros.tros_base.navigation.NavigationMsg.occupancy_grid)
  return type_.occupancy_grid_;
}

// .tros.tros_base.navigation.OccupancyVoxel occupancy_voxel = 3;
inline bool NavigationMsg::has_occupancy_voxel() const {
  return type_case() == kOccupancyVoxel;
}
inline void NavigationMsg::set_has_occupancy_voxel() {
  _oneof_case_[0] = kOccupancyVoxel;
}
inline void NavigationMsg::clear_occupancy_voxel() {
  if (has_occupancy_voxel()) {
    delete type_.occupancy_voxel_;
    clear_has_type();
  }
}
inline const ::tros::tros_base::navigation::OccupancyVoxel& NavigationMsg::_internal_occupancy_voxel() const {
  return *type_.occupancy_voxel_;
}
inline ::tros::tros_base::navigation::OccupancyVoxel* NavigationMsg::release_occupancy_voxel() {
  // @@protoc_insertion_point(field_release:tros.tros_base.navigation.NavigationMsg.occupancy_voxel)
  if (has_occupancy_voxel()) {
    clear_has_type();
      ::tros::tros_base::navigation::OccupancyVoxel* temp = type_.occupancy_voxel_;
    type_.occupancy_voxel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tros::tros_base::navigation::OccupancyVoxel& NavigationMsg::occupancy_voxel() const {
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.NavigationMsg.occupancy_voxel)
  return has_occupancy_voxel()
      ? *type_.occupancy_voxel_
      : *reinterpret_cast< ::tros::tros_base::navigation::OccupancyVoxel*>(&::tros::tros_base::navigation::_OccupancyVoxel_default_instance_);
}
inline ::tros::tros_base::navigation::OccupancyVoxel* NavigationMsg::mutable_occupancy_voxel() {
  if (!has_occupancy_voxel()) {
    clear_type();
    set_has_occupancy_voxel();
    type_.occupancy_voxel_ = CreateMaybeMessage< ::tros::tros_base::navigation::OccupancyVoxel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tros.tros_base.navigation.NavigationMsg.occupancy_voxel)
  return type_.occupancy_voxel_;
}

// .tros.tros_base.geometry.TransformationFrame transformation_frame = 4;
inline bool NavigationMsg::has_transformation_frame() const {
  return this != internal_default_instance() && transformation_frame_ != NULL;
}
inline const ::tros::tros_base::geometry::TransformationFrame& NavigationMsg::_internal_transformation_frame() const {
  return *transformation_frame_;
}
inline const ::tros::tros_base::geometry::TransformationFrame& NavigationMsg::transformation_frame() const {
  const ::tros::tros_base::geometry::TransformationFrame* p = transformation_frame_;
  // @@protoc_insertion_point(field_get:tros.tros_base.navigation.NavigationMsg.transformation_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::tros::tros_base::geometry::TransformationFrame*>(
      &::tros::tros_base::geometry::_TransformationFrame_default_instance_);
}
inline ::tros::tros_base::geometry::TransformationFrame* NavigationMsg::release_transformation_frame() {
  // @@protoc_insertion_point(field_release:tros.tros_base.navigation.NavigationMsg.transformation_frame)
  
  ::tros::tros_base::geometry::TransformationFrame* temp = transformation_frame_;
  transformation_frame_ = NULL;
  return temp;
}
inline ::tros::tros_base::geometry::TransformationFrame* NavigationMsg::mutable_transformation_frame() {
  
  if (transformation_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::tros::tros_base::geometry::TransformationFrame>(GetArenaNoVirtual());
    transformation_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tros.tros_base.navigation.NavigationMsg.transformation_frame)
  return transformation_frame_;
}
inline void NavigationMsg::set_allocated_transformation_frame(::tros::tros_base::geometry::TransformationFrame* transformation_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transformation_frame_);
  }
  if (transformation_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transformation_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transformation_frame, submessage_arena);
    }
    
  } else {
    
  }
  transformation_frame_ = transformation_frame;
  // @@protoc_insertion_point(field_set_allocated:tros.tros_base.navigation.NavigationMsg.transformation_frame)
}

inline bool NavigationMsg::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void NavigationMsg::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline NavigationMsg::TypeCase NavigationMsg::type_case() const {
  return NavigationMsg::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace navigation
}  // namespace tros_base
}  // namespace tros

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_navigation_5fmessage_2eproto
